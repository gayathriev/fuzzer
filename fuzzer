#!/usr/bin/env python3
import sys
import os
from support.detect import detect
from support.log_crash import log_crash
from pwn import *
from Harness import Harness
from modes.json_fuzzer import json_fuzzer
from modes.xml_fuzzer import xml_fuzzer
from modes.csv_fuzzer import csv_fuzzer
from modes.txt_fuzzer import txt_fuzzer

BINARY_FOLDER = "binaries/"
SEGFAULT_CODE = -11

if len(sys.argv) != 3:
    sys.exit("Usage: python3 fuzzer.py [binaryName] [sampleInput]")

binary_file = BINARY_FOLDER + sys.argv[1]
# print("Binary: " + binary_file)
input_file = BINARY_FOLDER + sys.argv[2]
# print("Input File: " + input_file)

# binary = BINARY_FOLDER + binary_file
# if not (os.path.isfile(binary)):
#     sys.exit("Binary does not exist")

# sample = BINARY_FOLDER + input_file
# if not (os.path.isfile(sample)):
#     sys.exit("Sample input does not exist")

'''
Execute fuzzer for specific data type:
 1. Plaintext (multiline) 
 2. JSON
 3. XML
 4. CSV
 5. JPEG 
 6. ELF  @TODO
 7. PDF
'''

mode_type = detect(input_file)
harness = Harness(binary_file)
# make instance of fuzzer from detected mode

def run_fuzzer():
    """ start the fuzzing campaign """
    if (mode_type == 'json'):
        # calls json_fuzzer
        json_fuzzer(binary_file, input_file)

    elif (mode_type == 'csv'):
        # calls csv_fuzzer
        payloads = csv_fuzzer(binary_file, input_file)
        for payload in payloads:
            exit_status = harness.start_process(payload)
            if exit_status == SEGFAULT_CODE:
                log_crash(str(payload[:-1],'utf-8'))
                exit(0)

    elif (mode_type == 'xml'):
        # calls xml_fuzzer
        xml_fuzzer(binary_file, input_file)

    elif (mode_type == 'txt'):
        # calls txt_fuzzer
        payloads = txt_fuzzer(binary_file, input_file)
        for payload in payloads:
            exit_status = harness.start_process(payload)
            if exit_status == SEGFAULT_CODE:
                log_crash(payload)
                exit(0)


    else:
        print("File format not supported yet.")
        return
    
    harness.no_summary()

run_fuzzer()
